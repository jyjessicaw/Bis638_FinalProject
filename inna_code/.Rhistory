main[,var_pmh] = lapply(main[,var_pmh] , factor)
summary(main[var_pmh])
main_pmh = main[c("disposition",var_pmh)]
chi5 =  get_chi_df(main_pmh, var_pmh)
levels(main$viralinfect)
length(levels(main$viralinfect))
lapply(main[,var_pmh] , levels())
for (var in var_pmh)
{
length(levels(var_pmh))
}
levels(var_pmh)
levels(main_pmh$var)
for (var in var_pmh)
{
levels(main_pmh$var)
}
for (var in var_pmh)
{
levels(main_pmh$var_pmh)
}
levels(var_pmh)
for (col in main_pmh)
{
length(levels(main_pmh[col]))
}
for(c in 1:ncol(main_pmh)) {       # for-loop over columns
length(levels(main_pmh[c]))
}
for(c in 1:ncol(main_pmh)) {       # for-loop over columns
y= length(levels(main_pmh[c]))
}
y
for(c in 1:ncol(main_pmh)) {       # for-loop over columns
y= length(levels(main_pmh[,c]))
}
y
for(c in 1:ncol(main_pmh)) {       # for-loop over columns
levels(main_pmh)
}
for(c in 1:ncol(main_pmh)) {       # for-loop over columns
levels(main_pmh$c)
}
c=NULL
for(c in 1:ncol(main_pmh)) {       # for-loop over columns
levels(main_pmh$c)
}
lapply(main_pmh , levels)
lapply(main_pmh , lengths(levels))
lapply(main_pmh , levels) %>% lapply(length)
x = lapply(main_pmh , levels) %>% lapply(length)
class(x)
x[1]
x[1][1]
x < 2
x == 1
x[[1]]
x[[x!=2]]
x[[1]]
x = lapply(main_pmh , levels) %>%
lapply(length) x %>%
x = lapply(main_pmh , levels) %>%
lapply(length) x %>%
x = lapply(main_pmh , levels) %>%
lapply(length) x %>%
x = lapply(main_pmh , levels) %>% lapply(length) x %>%
x = lapply(main_pmh , levels) %>%
lapply(length) x
x = lapply(main_pmh , levels)
%>% lapply(length)
x = lapply(main_pmh , levels) %>% lapply(length)
x = lapply(main_pmh , levels) %>%
lapply(length)
x = lapply(main_pmh , levels) %>%
lapply(length) %>%
sapply(function(x){as.numeric(x[2])})
x
x = lapply(main_pmh , levels) %>%
lapply(length) %>%
sapply(function(x){as.numeric(x[1])})
x
1
x
class(x)
x = lapply(main_pmh , levels) %>%
lapply(length) %>%
sapply(function(x){as.numeric(x[1])}) %>%
x == 1
x = lapply(main_pmh , levels) %>%
lapply(length) %>%
sapply(function(x){as.numeric(x[1])})
x
x[1]
which(x == 1)
x = lapply(main_pmh , levels) %>%
lapply(length) %>%
sapply(function(x){as.numeric(x[1])}) %>%
which(x == 1)
get_one_level = function(var) {
x = lapply(var , levels) %>%
lapply(length) %>%
sapply(function(x){as.numeric(x[1])})
which(x == 1)
}
get_one_level(main_pmh)
get_one_level = function(var) {
x = lapply(var , levels) %>%
lapply(length) %>%
sapply(function(x){as.numeric(x[1])})
which(x == 1)
}
get_one_level(main_pmh)
ncol(main_pmh)
main_pmh = main[-"ecodesmachinery"]
main_pmh = main[-c("ecodesmachinery")]
main_pmh = main[-c("ecodesmachinery")]
main_pmh = main[,-c("ecodesmachinery")]
main_pmh = main_pmh %>% select(-ecodesmachinery)
main_pmh = main_pmh %>% select(-c(ecodesmachinery))
main_pmh = main_pmh %>% dplyr::select(-c(ecodesmachinery))
ncol(main_pmh)
chi5 =  get_chi_df(main_pmh, var_pmh)
var_pmh = var_pmh[-c("ecodesmachinery")]
var_pmh = var_pmh[!var_pmh == "ecodesmachinery"]
chi5 =  get_chi_df(main_pmh, var_pmh)
chi5
var_hv = main %>% dplyr::select(o2_device_last, o2_device_min, o2_device_max, o2_device_median)
var_hv = c("o2_device_last", "o2_device_min", "o2_device_max", "o2_device_median")
main[,var_hv] = lapply(main[,var_hv] , factor)
summary(main[var_hv])
main_hv = main[c("disposition",var_hv)]
chi6 =  get_chi_df(main_hv, var_hv)
names(main)
grep("bloodua", names(main), value = TRUE)
var_hl_cat = c("bloodua_last","glucoseua_last","ketonesua_last","leukocytesua_last","nitriteua_last","pregtestur_last","proteinua_last","bloodculture,routine_last","urineculture,routine_last")
main[,var_hl_cat] = lapply(main[,var_hl_cat] , factor)
summary(main[var_hl_cal])
summary(main[var_hl_cat])
main_hl_cat = main[c("disposition",var_hl_cat)]
chi7 =  get_chi_df(main_hl_cat, var_hl_cat)
get_one_level(var_hl_cat)
get_one_level(var_hl_cat)
get_one_level(main_hl_cat)
main_hl_cat = main_hl_cat %>% dplyr::select(-("bloodculture,routine_last"))
var_hl_cat = var_hl_cat[!var_pmh == "bloodculture,routine_last"]
chi7 =  get_chi_df(main_hl_cat, var_hl_cat)
#bloodculture,routine_last has only 1 level we need to drop it
main_hl_cat = main_hl_cat %>% dplyr::select(-("bloodculture,routine_last"))
#bloodculture,routine_last has only 1 level we need to drop it
main_hl_cat = main_hl_cat %>% dplyr::select(-c("bloodculture,routine_last"))
var_hl_cat = var_hl_cat[!var_hl_cat == "bloodculture,routine_last"]
chi7 =  get_chi_df(main_hl_cat, var_hl_cat)
var_hl_cat = var_hl_cat[!var_hl_cat == "bloodculture,routine_last"]
var_hl_cat = var_hl_cat[!var_hl_cat == "bloodculture,routine_last"]
chi7 =  get_chi_df(main_hl_cat, var_hl_cat)
var_hl_cat = c("bloodua_last","glucoseua_last","ketonesua_last","leukocytesua_last","nitriteua_last","pregtestur_last","proteinua_last","bloodculture,routine_last","urineculture,routine_last")
main[,var_hl_cat] = lapply(main[,var_hl_cat] , factor)
summary(main[var_hl_cat])
main_hl_cat = main[c("disposition",var_hl_cat)]
get_one_level(main_hl_cat)
#bloodculture,routine_last has only 1 level we need to drop it
main_hl_cat = main_hl_cat %>% dplyr::select(-c("bloodculture,routine_last"))
var_hl_cat = var_hl_cat[!var_hl_cat == "bloodculture,routine_last"]
chi7 =  get_chi_df(main_hl_cat, var_hl_cat)
chi_results = rbind(chi1, chi2, chi3, chi4, chi5, chi6, chi7)
chi_results = chi_results %>% arrange(-statistic) %>% head(12)
chi_results = chi_results %>% dplyr::select(name, statistic)
c_imp = chi_results$name
ggplot(data=chi_results, aes(y=reorder(name,statistic), x=statistic)) +
geom_bar(stat="identity", fill="lightblue") +
labs(y="Features", title="Top 12 Chi-Square Selected Features", x="X2 Statistic") +
theme_bw()
set.seed(100)
main_small = sample_n(main, 1000)
tic("Boruta selecting features")
b = Boruta(UTI_diag ~ ., data=main_small, doTrace=2)
set.seed(100)
main_small = sample_n(main, 1000)
tic("Boruta selecting features")
b = Boruta(disposition ~ ., data=main_small, doTrace=2)
main_small = na.omit(main_small)
dim(main_small)
tic("Boruta selecting features")
set.seed(100)
main_small = sample_n(main, 1000)
main_small = na.omit(main_small)
tic("Boruta selecting features")
b = Boruta(disposition ~ ., data=main_small, doTrace=2)
set.seed(100)
main_small = sample_n(main, 2000)
main_small = na.omit(main_small)
tic("Boruta selecting features")
b = Boruta(disposition ~ ., data=main_small, doTrace=2)
set.seed(100)
set.seed(100)
main_small = sample_n(main, 1000)
set.seed(100)
main_small = sample_n(main, 1000)
main_small[is.na(main_small)] <- "not_reported"
var_cont = dplyr::select_if(main, is.numeric) %>% names()
var_cont
chi_results = rbind(chi1, chi2, chi3, chi4, chi5, chi6, chi7)
chi_results = chi_results %>% arrange(-statistic) %>% head(20)
chi_results = chi_results %>% dplyr::select(name, statistic)
c_imp = chi_results$name
ggplot(data=chi_results, aes(y=reorder(name,statistic), x=statistic)) +
geom_bar(stat="identity", fill="lightblue") +
labs(y="Features", title="Top 12 Chi-Square Selected Features", x="X2 Statistic") +
theme_bw()
chi_results = rbind(chi1, chi2, chi3, chi4, chi5, chi6, chi7)
chi_results = chi_results %>% arrange(-statistic) %>% head(12)
chi_results = chi_results %>% dplyr::select(name, statistic)
c_imp = chi_results$name
ggplot(data=chi_results, aes(y=reorder(name,statistic), x=statistic)) +
geom_bar(stat="identity", fill="lightblue") +
labs(y="Features", title="Top 12 Chi-Square Selected Features", x="X2 Statistic") +
theme_bw()
names(main)
var_hl_num = names(main)[302:652]
var_h1_num
var_hl_num = names(main)[302:652]
var_hl_num
main_hl_num =  main[c("disposition",var_hl_num)]
summary(main_hl_num)
main_hl_num %>% map_df(~ broom::tidy(t.test(. ~ grp)), .id = 'disposition')
main_hl_num %>% map_df(~ broom::tidy(t.test(. ~ 'disposition')), .id = 'disposition')
main_hl_num %>% map_df(~ broom::tidy(t.test(. ~ 'disposition')), .id = 'var')
t1 = main_hl_num %>%
select_if(is.numeric) %>%
map_df(~ broom::tidy(t.test(. ~ disposition)), .id = 'var')
t1 = main_hl_num %>%
select_if(is.numeric) %>%
map_df(~ broom::tidy(t.test(. ~ "disposition")), .id = 'var')
tests_list <- lapply(letters[1:3], function(x) t.test(as.formula(paste0(x, "~ grp")), data = test_data))
tests_list <- lapply(var_hl_num, function(x) t.test(as.formula(paste0(x, "~ disposition")), data = main_hl_num))
tests_list <- lapply(var_hl_num, function(x) t.test(as.formula(paste0(x, "~ disposition")), data = main_hl_num))
ttest_list <- mapply(\(x, g) t.test(x ~ g), main_hl_num[-1], main_hl_num[1], SIMPLIFY = FALSE)
ttest_list <- mapply(\(x, disposition) t.test(x ~ disposition), main_hl_num[-1], main_hl_num[1], SIMPLIFY = FALSE)
ttest_list <- mapply(\(x, "disposition") t.test(x ~ "disposition"), main_hl_num[-1], main_hl_num[1], SIMPLIFY = FALSE)
ttest_list <- mapply(\(x, g) t.test(x ~ "disposition"), main_hl_num[-1], main_hl_num[1], SIMPLIFY = FALSE)
?ttest
?t.test
ttest_list <- mapply(\(x, disposition) t.test(x ~ disposition, data=main_hl_num), main_hl_num[-1], main_hl_num[1], SIMPLIFY = FALSE)
nested  = main_hl_num %>%
group_by(disposition) %>%
summarise(across(everything(),  ~ list(
t.test(.) %>%
tidy() %>%
select(estimate, statistic,
p.value, conf.low, conf.high)
)))
nested  = main_hl_num %>%
na.omit() %>%
group_by(disposition) %>%
summarise(across(everything(),  ~ list(
t.test(.) %>%
tidy() %>%
select(estimate, statistic,
p.value, conf.low, conf.high)
)))
nested  = main_hl_num %>%
group_by(disposition) %>%
summarise(across(everything(),  ~ list(
t.test(.) %>%
tidy() %>%
dplyr::select(estimate, statistic,
p.value, conf.low, conf.high)
)))
tic("boruta selecting continuous features")
set.seed(100)
main_hl_num_small = sample_n(main_hl_num, 1000)
main_hl_num_small = na.omit(main_hl_num_small)
tic("Boruta selecting features")
b = Boruta(disposition ~ ., data=main_hl_num_small, doTrace=2)
nested  = main_hl_num %>%
group_by(disposition) %>%
summarise(across(everything(),  ~ list(
t.test(.) %>%
tidy() %>%
dplyr::select(estimate, statistic,
p.value, conf.low, conf.high)
)))
names(main_hl_num)
summary(main_hl_num["benzodiazepinesscreen,urine,noconf._max"])
get_one_level(main_hl_num)
summary(main_hl_num["benzodiazepinesscreen,urine,noconf._max"])
sapply(main_hl_num, function(x)all(is.na(x)))
x = sapply(main_hl_num, function(x)all(is.na(x)))
x[x==TRUE]
get_one_level = function(df) {
x = lapply(var , levels) %>%
lapply(length) %>%
sapply(function(x){as.numeric(x[1])})
which(x == 1)
}
get_all_missing = function(df) {
x = sapply(df, function(x)all(is.na(x)))
x[x==TRUE]
}
get_all_missing(main_hl_num)
get_all_missing(main_hl_num)
var_hl_num = var_hl_num[!var_hl_cat %in% get_all_missing(main_hl_num)]
main_hl_num = main_hl_num %>% dplyr::select(c(var_hl_num)
get_all_missing(main_hl_num)
main_hl_num = main_hl_num %>% dplyr::select(c(var_hl_num)
main_hl_num = main_hl_num %>% dplyr::select(var_hl_num)
var_hl_num
main_hl_num = main_hl_num %>% dplyr::select(c(var_hl_num))
get_all_missing(main_hl_num)
var_hl_num = var_hl_num[!var_hl_cat %in% get_all_missing(main_hl_num)]
class(var_hl_cat)
var_hl_cat
var_hl_num
x = get_all_missing(main_hl_num)
class(x)
x
names(x)
get_all_missing = function(df) {
x = sapply(df, function(x)all(is.na(x)))
x[x==TRUE] %>%
names()
}
get_all_missing(main_hl_num)
x = get_all_missing(main_hl_num)
var_hl_num = var_hl_num[!var_hl_cat %in% x]
x
View(main_hl_num)
main_hl_num = main_hl_num %>% dplyr::select(c(var_hl_num))
get_all_missing(main_hl_num)
var_hl_num = var_hl_num[!var_hl_cat %in% x]
main_hl_num = main_hl_num %>% dplyr::select(c(var_hl_num))
get_all_missing(main_hl_num)
`%!in%` <- Negate(`%in%`)
library(reticulate)
install_miniconda()
var_hl_num = var_hl_num[var_hl_cat !%in% x]
var_hl_num = var_hl_num[var_hl_cat %!in% x]
var_h1_num
var_h1_num
var_hl_num
main_hl_num = main_hl_num %>% dplyr::select(c(var_hl_num)) %>% get_all_missing(main_hl_num)
main_hl_num = main_hl_num %>% dplyr::select(c(var_hl_num))
get_all_missing(main_hl_num)
main_hl_num
var_hl_num = names(main)[302:652]
length(var_hl_num)
main_hl_num =  main[c("disposition",var_hl_num)]
x = get_all_missing(main_hl_num)
length(x)
var_hl_num = var_hl_num[var_hl_cat %!in% x]
x
main_hl_num = main_hl_num %>% dplyr::select(c(var_hl_num))
dim(main_hl_num)
var_hl_num = var_hl_num[var_hl_cat %!in% x]
var_hl_num = var_hl_num[var_hl_num %!in% x]
main_hl_num = main_hl_num %>% dplyr::select(c(var_hl_num))
dim(main_hl_num)
#"benzodiazepinesscreen,urine,noconf._max"
nested  = main_hl_num %>%
group_by(disposition) %>%
summarise(across(everything(),  ~ list(
t.test(.) %>%
tidy() %>%
dplyr::select(estimate, statistic,
p.value, conf.low, conf.high)
)))
#"benzodiazepinesscreen,urine,noconf._max"
nested  = main_hl_num %>%
group_by("disposition") %>%
summarise(across(everything(),  ~ list(
t.test(.) %>%
tidy() %>%
dplyr::select(estimate, statistic,
p.value, conf.low, conf.high)
)))
names(main_h1_num)
names(main_hl_num)
main_hl_num[,1]
var_hl_num = var_hl_num[var_hl_num %!in% x]
main_hl_num = main_hl_num %>% dplyr::select(c(var_hl_num),) %>% select("disposition")
var_hl_num = var_hl_num[var_hl_num %!in% x]
main_hl_num = main_hl_num %>% dplyr::select(c(var_hl_num),) %>% dplyr::select("disposition")
var_hl_num = var_hl_num[var_hl_num %!in% x]
main_hl_num = main_hl_num %>% dplyr::select(c(var_hl_num),disposition)
var_hl_num = var_hl_num[var_hl_num %!in% x]
main_hl_num = main_hl_num %>% dplyr::select(c(var_hl_num,disposition))
var_hl_num = names(main)[302:652]
main_hl_num =  main[c("disposition",var_hl_num)]
x = get_all_missing(main_hl_num)
length(x)
x
var_hl_num = var_hl_num[var_hl_num %!in% x]
main_hl_num = main_hl_num %>% dplyr::select(c(var_hl_num,disposition))
main_hl_num[,1]
main_hl_num
names(main_hl_num)
tests <- lapply(1:339, function(x) t.test(main_hl_num[,x] ~ main_hl_num[,339]))
tests <- lapply(1:339, function(x) t.test(main_hl_num[,.] ~ main_hl_num[,339]))
tests <- lapply(1:339, function(x) t.test(main_hl_num[,var_h1_num] ~ main_hl_num[,339]))
tests <- lapply(1:339, function(x) t.test(main_hl_num[,var_hl_num] ~ main_hl_num[,339]))
tests <- lapply(1:339, function(x) t.test(main_hl_num[var_hl_num] ~ main_hl_num[,339]))
df %>% pivot_longer(cols=!starts_with("disposition")) %>%
group_by(disposition) %>%
do(tidy(t.test(.$value ~ .$group)))
main_hl_num %>% pivot_longer(cols=!starts_with("disposition")) %>%
group_by(disposition) %>%
do(tidy(t.test(.$value ~ .$group)))
library(naniar)
install.packages("naniar")
library(naniar)
library(DT)
main_dem %>%
miss_var_summary() %>%
mutate(`Percent Missing` = round(10*pct_miss,2)) %>%
rename(`Number Missing` = n_miss, Variable=variable) %>%
select(-pct_miss) %>%
datatable()
main_dem %>%
miss_var_summary() %>% head()
main_dem %>%
miss_var_summary() %>%
mutate("Percent Missing" = round(10*pct_miss,2))
main_dem %>%
miss_var_summary()
main_tri = main[c("disposition",var_tri)]
dim(main_tri)
main_tri %>%
miss_var_summary()
gc()
getwd()
df = read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/cleveland.data")
head(Df)
head(df)
df = read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/cleveland.data",  sep="\t")
iris.uci <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/cleaveland.data"), header=FALSE)
c.ici <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/cleveland.data"), header=FALSE)
df <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/cleveland.data", header=FALSE)
head(df)
names(df)
names <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/heart-disease.names", header=FALSE)
names
df = read.csv("https://www.kaggle.com/datasets/johnsmith88/heart-disease-dataset/download?datasetVersionNumber=2")
df
df = read.csv("http://data.ctdata.org/dataset/a4ad31a4-4d6c-41c5-9e32-72bdd1c4fcd0/resource/a12b25fe-3b54-4150-8066-2611d3659dc1/download/accidental-drug-related-deaths-by-drug-type2012-2018.csv")
head(df)
value_counts(df$Town)
table(df$Town)
table(df$Age)
table(df$Race)
table(df$Variable)
table(df$Ethnicity)
table(df$Measure.Type)
library(ctrialsgov)
#devtools::install_github("presagia-analytics/ctrialsgov")
library(DBI) #database interface
library(duckdb) #database and connections
library(dplyr)
library(dbplyr)
getwd()
setwd("C:/Users/12034/Documents/GitHub/Bis638_FinalProject/")
con = ctgov_create_duckdb(
basedir = file.path("mimic-iii-clinical-database-1.4"),
dbdir = file.path("mimic.duckdb"))
setwd("C:/Users/12034/Documents")
getwd()
con = ctgov_create_duckdb(
basedir = file.path("mimic-iii-clinical-database-1.4"),
dbdir = file.path("mimic.duckdb"))
?ctgov_create_duckdb
con = ctgov_create_duckdb(
basedir = file.path("mimic-iii-clinical-database-1.4"),
dbdir = file.path("mimic.duckdb"))
install.packages("iterators")
library(iterators)
it = itcount(2)
it = icount(2)
nextElem(it)
library(usethis)
use_vignette("bis620")
devtools::use_vignette("bis620")
view_icd = read.csv("view_icd.csv")
getwd()
setwd("C:/Users/12034/Documents/GitHub/Bis638_FinalProject/")
view_icd = read.csv("view_icd.csv")
drugs2 = read.csv("drugs2.csv")
view_icd %>% head(10) %>%
ggplot(aes(y=reorder(subtype,n),
x=n,
fill=subtype,
text=paste("n:",n))) +
geom_col() +
theme_bw() +
labs(y="Subtypes", x="Count", title="All Pneumonia Subtypes") +
theme(legend.position="none")
library(ggplot2)
library(magrittr)
library(dplyr)
view_icd %>% head(10) %>%
ggplot(aes(y=reorder(subtype,n),
x=n,
fill=subtype,
text=paste("n:",n))) +
geom_col() +
theme_bw() +
labs(y="Subtypes", x="Count", title="All Pneumonia Subtypes") +
theme(legend.position="none")
setwd("C:/Users/12034/Documents/GitHub/Bis638_FinalProject/inna/")
#=========================================#
# CSV files were downloaded from sql queries
#=========================================#
view_icd = read.csv("data/view_icd.csv")
drugs2 = read.csv("data/drugs2.csv")
